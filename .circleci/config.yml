# PLEASE run `circleci config validate` in your CLI prior to committing to the repository.
cache_key: &cache_key v1-sbt-{{ checksum "build.sbt" }}-{{ checksum "project/plugins.sbt" }}-{{ .Branch }}
version: 2.1
executors: &build_executors
  standard_build_env:
    working_directory: ~/project
    docker:
      - image: quay.io/domino/builder:latest
        auth:
          username: $QUAY_USER
          password: $QUAY_PASSWORD
    resource_class: large
commands:
  sbt_test:
    steps:
      - run:
          name: "Run tests"
          command: |
            cat /dev/null | sbt coverage test
  formatting_check:
    steps:
      - run:
          name: "Formatting Check"
          command: |
            # compile already triggered scalariform, so simply run the diff here
            git diff --exit-code
  coalesce_test_reports:
    steps:
      - run:
          name: "Coalesce Test Reports"
          command: |
            mkdir -p /tmp/test-results
            # Test results can be at any level of depth (because our SBT projects can nest arbitrarily) so find all results
            find . -wholename '*/test-reports/*.xml' -exec cp {} /tmp/test-results/ \;
            ls -al /tmp/test-results
  coverage_check:
    steps:
      - run:
          name: "Coverage check"
          command: |
            cat /dev/null | sbt coverageReport
  publish_sbt:
    steps:
      - run:
          name: "Publish artifact to artifactory using SBT"
          command: |
            if [ $CIRCLE_BRANCH = 'master' ]; then
              RELEASE_VERSION_SUFFIX=${CIRCLE_BUILD_NUM}
            else
              RELEASE_VERSION_SUFFIX=${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1}
            fi

            RELEASE_VERSION="$(cat version.sbt | sed 's/.*"\(.*\)-SNAPSHOT".*/\1/').$RELEASE_VERSION_SUFFIX"
            echo "export RELEASE_VERSION=$RELEASE_VERSION" >> $BASH_ENV

            cat /dev/null | \
            sbt 'set version in ThisBuild := sys.env("RELEASE_VERSION")' clean publish

jobs:
  deliver_plugin:
    executor: standard_build_env
    steps:
      - checkout
      - restore_cache:
          key: *cache_key
      - sbt_test
      - formatting_check
      - coalesce_test_reports
      - store_test_results:
          path: /tmp/test-results
      - coverage_check
      - save_cache:
          key: *cache_key
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
            - "~/.coursier/cache"
      - publish_sbt
      - run:
          name: "Publish a Github release"
          command: |
            if [ $CIRCLE_BRANCH = 'master' ]; then
              RELEASE_VERSION_SUFFIX=${CIRCLE_BUILD_NUM}
              # Save Git diff

              if git describe --tags --abbrev=0; then
                # Compute diff from previous tag
                git log $(git describe --tags --abbrev=0)..HEAD --oneline --format=format:'%h %s' --full-diff | grep -v 'Merge branch' > git_diff
              else
                # Edge case of the initial release to GH
                git log HEAD --oneline --format=format:'%h %s' --full-diff | grep -v 'Merge branch' > git_diff
              fi

              echo "Publishing Github release with,"
              cat git_diff

              echo "Releasing version $RELEASE_VERSION on GitHub"

              RELEASE_DESCRIPTION=$(cat git_diff | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
              API_JSON=$(printf '{"tag_name": "v%s","target_commitish": "master","name": "Version %s","body": %s,"draft": false,"prerelease": false}' $RELEASE_VERSION $RELEASE_VERSION "$RELEASE_DESCRIPTION")

              curl --data "$API_JSON" https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases?access_token=$GITHUB_TOKEN
            else
              echo "Not publishing GH release because this is not the master branch."
            fi

workflows:
  build_and_publish:
    jobs:
      - deliver_plugin
